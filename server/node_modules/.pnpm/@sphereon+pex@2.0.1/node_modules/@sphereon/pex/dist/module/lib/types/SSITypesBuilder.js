import { CredentialMapper, } from '@sphereon/ssi-types';
import { definitionVersionDiscovery, JsonPathUtils } from '../utils';
import { InternalPresentationDefinitionV1, InternalPresentationDefinitionV2, PEVersion, } from './Internal.types';
export class SSITypesBuilder {
    static modelEntityToInternalPresentationDefinitionV1(p) {
        const pd = SSITypesBuilder.createCopyAndModifyPresentationDefinition(p);
        return new InternalPresentationDefinitionV1(pd.id, pd.input_descriptors, pd.format, pd.name, pd.purpose, pd.submission_requirements);
    }
    static modelEntityInternalPresentationDefinitionV2(p) {
        const pd = SSITypesBuilder.createCopyAndModifyPresentationDefinition(p);
        return new InternalPresentationDefinitionV2(pd.id, pd.input_descriptors, pd.format, pd.frame, pd.name, pd.purpose, pd.submission_requirements);
    }
    static createCopyAndModifyPresentationDefinition(p) {
        const pd = JSON.parse(JSON.stringify(p));
        JsonPathUtils.changePropertyNameRecursively(pd, '_const', 'const');
        JsonPathUtils.changePropertyNameRecursively(pd, '_enum', 'enum');
        JsonPathUtils.changeSpecialPathsRecursively(pd);
        return pd;
    }
    static mapExternalVerifiablePresentationToWrappedVP(presentation) {
        return CredentialMapper.toWrappedVerifiablePresentation(presentation);
    }
    static mapExternalVerifiableCredentialsToWrappedVcs(verifiableCredentials) {
        return CredentialMapper.toWrappedVerifiableCredentials(Array.isArray(verifiableCredentials) ? verifiableCredentials : [verifiableCredentials]);
    }
    static toInternalPresentationDefinition(presentationDefinition) {
        const presentationDefinitionCopy = JSON.parse(JSON.stringify(presentationDefinition));
        const versionResult = definitionVersionDiscovery(presentationDefinitionCopy);
        if (versionResult.error)
            throw versionResult.error;
        if (versionResult.version == PEVersion.v1) {
            return SSITypesBuilder.modelEntityToInternalPresentationDefinitionV1(presentationDefinitionCopy);
        }
        return SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinitionCopy);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU1NJVHlwZXNCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL3R5cGVzL1NTSVR5cGVzQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQ0wsZ0JBQWdCLEdBTWpCLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsT0FBTyxFQUFFLDBCQUEwQixFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVyRSxPQUFPLEVBR0wsZ0NBQWdDLEVBQ2hDLGdDQUFnQyxFQUVoQyxTQUFTLEdBQ1YsTUFBTSxrQkFBa0IsQ0FBQztBQUUxQixNQUFNLE9BQU8sZUFBZTtJQUNuQixNQUFNLENBQUMsNkNBQTZDLENBQUMsQ0FBTztRQUNqRSxNQUFNLEVBQUUsR0FBUyxlQUFlLENBQUMseUNBQXlDLENBQUMsQ0FBQyxDQUFTLENBQUM7UUFDdEYsT0FBTyxJQUFJLGdDQUFnQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3ZJLENBQUM7SUFFTSxNQUFNLENBQUMsMkNBQTJDLENBQUMsQ0FBTztRQUMvRCxNQUFNLEVBQUUsR0FBUyxlQUFlLENBQUMseUNBQXlDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsT0FBTyxJQUFJLGdDQUFnQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDakosQ0FBQztJQUVELE1BQU0sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUEwQjtRQUN6RSxNQUFNLEVBQUUsR0FBNEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsYUFBYSxDQUFDLDZCQUE2QixDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbkUsYUFBYSxDQUFDLDZCQUE2QixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakUsYUFBYSxDQUFDLDZCQUE2QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELE1BQU0sQ0FBQyw0Q0FBNEMsQ0FDakQsWUFBK0U7UUFFL0UsT0FBTyxnQkFBZ0IsQ0FBQywrQkFBK0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsTUFBTSxDQUFDLDRDQUE0QyxDQUNqRCxxQkFBb0Y7UUFFcEYsT0FBTyxnQkFBZ0IsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNqSixDQUFDO0lBRUQsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLHNCQUErQztRQUNyRixNQUFNLDBCQUEwQixHQUE0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBQy9HLE1BQU0sYUFBYSxHQUFzQiwwQkFBMEIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ2hHLElBQUksYUFBYSxDQUFDLEtBQUs7WUFBRSxNQUFNLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDbkQsSUFBSSxhQUFhLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUU7WUFDekMsT0FBTyxlQUFlLENBQUMsNkNBQTZDLENBQUMsMEJBQXNELENBQUMsQ0FBQztTQUM5SDtRQUNELE9BQU8sZUFBZSxDQUFDLDJDQUEyQyxDQUFDLDBCQUFzRCxDQUFDLENBQUM7SUFDN0gsQ0FBQztDQUNGIn0=