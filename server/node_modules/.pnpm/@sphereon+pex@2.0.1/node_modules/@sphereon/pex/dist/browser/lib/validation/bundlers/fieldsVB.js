"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldsVB = void 0;
const pex_models_1 = require("@sphereon/pex-models");
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const jsonpath_1 = __importDefault(require("jsonpath"));
const validationBundler_1 = require("./validationBundler");
class FieldsVB extends validationBundler_1.ValidationBundler {
    constructor(parentTag) {
        super(parentTag, 'fields');
        this.mustHaveValidJsonPathsMsg = 'field object "path" property must contain array of valid json paths';
        this.pathObjMustHaveValidJsonPathMsg = 'field object "path" property must contain valid json paths.';
        this.filterMustBeValidJsonSchemaMsg = 'field object "filter" property must be valid json schema';
        this.filterIsMustInPresenceOfPredicateMsg = 'field object must have a "filter" property if "predicate" is present';
        this.filterIsNotValidJsonSchemaDescriptorMsg = 'could not parse "filter" object as a valid json schema descriptor.';
        this.purposeShouldBeANonEmptyStringMsg = 'purpose should be a non empty string';
        this.shouldBeKnownOptionMsg = 'Unknown predicate property';
        this.schemaValidator = new ajv_1.default();
        (0, ajv_formats_1.default)(this.schemaValidator);
    }
    getValidations(fields) {
        let validations = [];
        if (fields) {
            for (let srInd = 0; srInd < fields.length; srInd++) {
                validations = [...validations, ...this.getValidationsFor(fields[srInd], srInd)];
            }
        }
        return validations;
    }
    getValidationsFor(field, indx) {
        return [
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: this.mustHaveValidJsonPaths(),
                message: this.mustHaveValidJsonPathsMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: this.filterMustBeValidJsonSchema(),
                message: this.filterMustBeValidJsonSchemaMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: this.filterIsMustInPresenceOfPredicate(),
                message: this.filterIsMustInPresenceOfPredicateMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: (field) => FieldsVB.optionalNonEmptyString(field === null || field === void 0 ? void 0 : field.purpose),
                message: this.purposeShouldBeANonEmptyStringMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: (field) => FieldsVB.shouldBeKnownOption(field === null || field === void 0 ? void 0 : field.predicate),
                message: this.shouldBeKnownOptionMsg,
            },
        ];
    }
    getMyTag(srInd) {
        // TODO extract to make it generic
        return this.parentTag + '.' + this.myTag + '[' + srInd + ']';
    }
    mustHaveValidJsonPaths() {
        return (fieldObj) => fieldObj.path != null && fieldObj.path.length > 0 && this._validateJsonPaths(fieldObj.path);
    }
    _validateJsonPaths(jsonPath) {
        const invalidPaths = [];
        jsonPath.forEach((path) => {
            try {
                jsonpath_1.default.parse(path);
            }
            catch (err) {
                invalidPaths.push(path);
            }
        });
        if (invalidPaths.length > 0) {
            throw this.toChecked(this.pathObjMustHaveValidJsonPathMsg + ' Got: ' + JSON.stringify(invalidPaths));
        }
        return true;
    }
    filterMustBeValidJsonSchema() {
        return (fieldObj) => this._validateFilter(fieldObj.filter);
    }
    _validateFilter(filter) {
        if (filter == null) {
            return true;
        }
        try {
            this.schemaValidator.compile(filter);
        }
        catch (err) {
            throw this.toChecked(this.filterIsNotValidJsonSchemaDescriptorMsg + ' Got ' + JSON.stringify(filter));
        }
        return true;
    }
    filterIsMustInPresenceOfPredicate() {
        return (fieldObj) => !(fieldObj.predicate != null && fieldObj.filter == null);
    }
    static optionalNonEmptyString(str) {
        // TODO extract to generic utils or use something like lodash
        return str == null || str.length > 0;
    }
    static shouldBeKnownOption(option) {
        // TODO can be be extracted as a generic function
        return option == null || option == pex_models_1.Optionality.Required || option == pex_models_1.Optionality.Preferred;
    }
}
exports.FieldsVB = FieldsVB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzVkIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvdmFsaWRhdGlvbi9idW5kbGVycy9maWVsZHNWQi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBeUY7QUFDekYsOENBQXNCO0FBQ3RCLDhEQUFxQztBQUNyQyx3REFBMEI7QUFJMUIsMkRBQXdEO0FBRXhELE1BQWEsUUFBUyxTQUFRLHFDQUF3QztJQVdwRSxZQUFZLFNBQWlCO1FBQzNCLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFUWiw4QkFBeUIsR0FBRyxxRUFBcUUsQ0FBQztRQUNsRyxvQ0FBK0IsR0FBRyw2REFBNkQsQ0FBQztRQUNoRyxtQ0FBOEIsR0FBRywwREFBMEQsQ0FBQztRQUM1Rix5Q0FBb0MsR0FBRyxzRUFBc0UsQ0FBQztRQUM5Ryw0Q0FBdUMsR0FBRyxvRUFBb0UsQ0FBQztRQUMvRyxzQ0FBaUMsR0FBRyxzQ0FBc0MsQ0FBQztRQUMzRSwyQkFBc0IsR0FBRyw0QkFBNEIsQ0FBQztRQUlyRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksYUFBRyxFQUFFLENBQUM7UUFDakMsSUFBQSxxQkFBVSxFQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sY0FBYyxDQUFDLE1BQTZCO1FBQ2pELElBQUksV0FBVyxHQUFvQyxFQUFFLENBQUM7UUFDdEQsSUFBSSxNQUFNLEVBQUU7WUFDVixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDbEQsV0FBVyxHQUFHLENBQUMsR0FBRyxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDakY7U0FDRjtRQUNELE9BQU8sV0FBVyxDQUFD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