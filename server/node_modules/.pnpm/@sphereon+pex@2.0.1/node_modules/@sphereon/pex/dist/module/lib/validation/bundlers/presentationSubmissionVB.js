import jp from 'jsonpath';
import { Checked, Status } from '../../ConstraintUtils';
import { ValidationBundler } from './validationBundler';
export class PresentationSubmissionVB extends ValidationBundler {
    constructor(parentTag) {
        super(parentTag, 'presentation_submission');
    }
    getValidations(ps) {
        return [
            {
                tag: this.getTag(),
                target: ps,
                predicate: (ps) => ps != null,
                message: 'presentation_submission should be non null.',
            },
            {
                tag: this.getTag(),
                target: ps,
                predicate: (ps) => PresentationSubmissionVB.nonEmptyString(ps?.id),
                message: 'id should not be empty',
            },
            {
                tag: this.getTag(),
                target: ps,
                predicate: (ps) => PresentationSubmissionVB.nonEmptyString(ps?.definition_id),
                message: 'presentation_definition_id should not be empty',
            },
            {
                tag: this.getTag(),
                target: ps,
                predicate: (ps) => PresentationSubmissionVB.descriptorMapMustBePresent(ps?.descriptor_map),
                message: 'descriptor_map should be a non-empty list',
            },
            {
                tag: this.getTag(),
                target: ps,
                predicate: (ps) => PresentationSubmissionVB.idMustBeSameForEachLevelOfNesting(ps?.descriptor_map),
                message: 'each descriptor should have a one id in it, on all levels',
            },
            {
                tag: this.getTag(),
                target: ps,
                predicate: (ps) => PresentationSubmissionVB.formatsShouldBeKnown(ps?.descriptor_map),
                message: 'each format should be one of the known format',
            },
            {
                tag: this.getTag(),
                target: ps,
                predicate: (ps) => PresentationSubmissionVB.pathsShouldBeValidJsonPaths(ps?.descriptor_map),
                message: 'each path should be a valid jsonPath',
            },
        ];
    }
    static nonEmptyString(id) {
        // TODO extract to generic utils or use something like lodash
        return id != null && id.length > 0;
    }
    static descriptorMapMustBePresent(descriptor_map) {
        return descriptor_map != null && descriptor_map.length > 0;
    }
    static idMustBeSameForEachLevelOfNesting(descriptor_map) {
        let doesEachDescriptorHasOneIdOnAllLevelsOfNesting = true;
        if (descriptor_map != null) {
            for (let i = 0; i < descriptor_map.length; i++) {
                doesEachDescriptorHasOneIdOnAllLevelsOfNesting =
                    doesEachDescriptorHasOneIdOnAllLevelsOfNesting &&
                        PresentationSubmissionVB.isIdSameForEachLevelOfNesting(descriptor_map[i], descriptor_map[i].id);
            }
        }
        return doesEachDescriptorHasOneIdOnAllLevelsOfNesting;
    }
    static isIdSameForEachLevelOfNesting(descriptor, id) {
        let isSame = true;
        if (descriptor != null && descriptor.path_nested != null) {
            if (descriptor.path_nested.id == id) {
                // WARNING : Specification does not allow any bounds. So, no checks against stackoverflow due to unbounded recursion.
                isSame = isSame && PresentationSubmissionVB.isIdSameForEachLevelOfNesting(descriptor.path_nested, id);
            }
            else {
                isSame = false;
            }
        }
        return isSame;
    }
    static formatsShouldBeKnown(descriptor_map) {
        let isProofFormatKnown = true;
        if (descriptor_map != null) {
            const formats = ['jwt', 'jwt_vc', 'jwt_vp', 'ldp', 'ldp_vc', 'ldp_vp'];
            for (let i = 0; i < descriptor_map.length; i++) {
                isProofFormatKnown = PresentationSubmissionVB.formatShouldBeKnown(descriptor_map[i], formats);
            }
        }
        return isProofFormatKnown;
    }
    static formatShouldBeKnown(descriptor, formats) {
        let isProofFormatKnown = true;
        if (descriptor != null) {
            isProofFormatKnown = formats.includes(descriptor.format);
        }
        if (descriptor.path_nested != null) {
            // WARNING : Specification does not allow any bounds. So, no checks against stackoverflow due to unbounded recursion.
            isProofFormatKnown = isProofFormatKnown && PresentationSubmissionVB.formatShouldBeKnown(descriptor.path_nested, formats);
        }
        return isProofFormatKnown;
    }
    static pathsShouldBeValidJsonPaths(descriptor_map) {
        let isPathValidJsonPath = true;
        if (descriptor_map != null) {
            for (let i = 0; i < descriptor_map.length; i++) {
                isPathValidJsonPath = PresentationSubmissionVB.pathShouldBeValid(descriptor_map[i], []);
            }
        }
        return isPathValidJsonPath;
    }
    static pathShouldBeValid(descriptor, invalidPaths) {
        if (descriptor != null) {
            try {
                jp.parse(descriptor.path);
            }
            catch (err) {
                invalidPaths.push(descriptor.path);
            }
            if (descriptor.path_nested != null) {
                // WARNING : Specification does not allow any bounds. So, no checks against stackoverflow due to unbounded recursion.
                PresentationSubmissionVB.pathShouldBeValid(descriptor.path_nested, invalidPaths);
            }
        }
        if (invalidPaths.length > 0) {
            throw new Checked('', Status.ERROR, 'These were not parsable json paths: ' + JSON.stringify(invalidPaths));
        }
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VudGF0aW9uU3VibWlzc2lvblZCLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGliL3ZhbGlkYXRpb24vYnVuZGxlcnMvcHJlc2VudGF0aW9uU3VibWlzc2lvblZCLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUxQixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXhELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxpQkFBeUM7SUFDckYsWUFBWSxTQUFpQjtRQUMzQixLQUFLLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLGNBQWMsQ0FBQyxFQUEwQjtRQUM5QyxPQUFPO1lBQ0w7Z0JBQ0UsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFNBQVMsRUFBRSxDQUFDLEVBQTBCLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJO2dCQUNyRCxPQUFPLEVBQUUsNkNBQTZDO2FBQ3ZEO1lBQ0Q7Z0JBQ0UsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFNBQVMsRUFBRSxDQUFDLEVBQTBCLEVBQUUsRUFBRSxDQUFDLHdCQUF3QixDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO2dCQUMxRixPQUFPLEVBQUUsd0JBQXdCO2FBQ2xDO1lBQ0Q7Z0JBQ0UsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFNBQVMsRUFBRSxDQUFDLEVBQTBCLEVBQUUsRUFBRSxDQUFDLHdCQUF3QixDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUs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