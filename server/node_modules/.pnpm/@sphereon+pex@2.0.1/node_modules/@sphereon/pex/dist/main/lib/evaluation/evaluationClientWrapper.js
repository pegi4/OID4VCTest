"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvaluationClientWrapper = void 0;
const pex_models_1 = require("@sphereon/pex-models");
const jsonpath_1 = __importDefault(require("jsonpath"));
const ConstraintUtils_1 = require("../ConstraintUtils");
const utils_1 = require("../utils");
const evaluationClient_1 = require("./evaluationClient");
class EvaluationClientWrapper {
    constructor() {
        this._client = new evaluationClient_1.EvaluationClient();
    }
    getEvaluationClient() {
        return this._client;
    }
    selectFrom(presentationDefinition, wrappedVerifiableCredentials, opts) {
        var _a;
        let selectResults;
        this._client.evaluate(presentationDefinition, wrappedVerifiableCredentials, opts);
        const warnings = [...this.formatNotInfo(ConstraintUtils_1.Status.WARN)];
        const errors = [...this.formatNotInfo(ConstraintUtils_1.Status.ERROR)];
        if (presentationDefinition.submission_requirements) {
            const info = this._client.results.filter((result) => result.evaluator === 'MarkForSubmissionEvaluation' && result.payload.group && result.status !== ConstraintUtils_1.Status.ERROR);
            const marked = Array.from(new Set(info));
            const matchSubmissionRequirements = this.matchSubmissionRequirements(presentationDefinition, presentationDefinition.submission_requirements, marked);
            const matches = this.extractMatches(matchSubmissionRequirements);
            const credentials = matches.map((e) => jsonpath_1.default.nodes(this._client.wrappedVcs.map((wrapped) => wrapped.original), e)[0].value);
            selectResults = {
                errors: errors,
                matches: [...matchSubmissionRequirements],
                areRequiredCredentialsPresent: ConstraintUtils_1.Status.INFO,
                verifiableCredential: credentials,
                warnings,
            };
        }
        else {
            const marked = this._client.results.filter((result) => result.evaluator === 'MarkForSubmissionEvaluation' && result.status !== ConstraintUtils_1.Status.ERROR);
            const matchSubmissionRequirements = this.matchWithoutSubmissionRequirements(marked, presentationDefinition);
            const matches = this.extractMatches(matchSubmissionRequirements);
            const credentials = matches.map((e) => jsonpath_1.default.nodes(this._client.wrappedVcs.map((wrapped) => wrapped.original), e)[0].value);
            selectResults = {
                errors: errors,
                matches: [...matchSubmissionRequirements],
                areRequiredCredentialsPresent: ConstraintUtils_1.Status.INFO,
                verifiableCredential: credentials,
                warnings,
            };
        }
        this.fillSelectableCredentialsToVerifiableCredentialsMapping(selectResults, wrappedVerifiableCredentials);
        selectResults.areRequiredCredentialsPresent = this.determineAreRequiredCredentialsPresent(selectResults === null || selectResults === void 0 ? void 0 : selectResults.matches);
        this.remapMatches(wrappedVerifiableCredentials.map((wrapped) => wrapped.original), selectResults.matches, selectResults === null || selectResults === void 0 ? void 0 : selectResults.verifiableCredential);
        (_a = selectResults.matches) === null || _a === void 0 ? void 0 : _a.forEach((m) => {
            this.updateSubmissionRequirementMatchPathToAlias(m, 'verifiableCredential');
        });
        if (selectResults.areRequiredCredentialsPresent === ConstraintUtils_1.Status.INFO) {
            selectResults.errors = [];
        }
        return selectResults;
    }
    remapMatches(verifiableCredentials, submissionRequirementMatches, vcsToSend) {
        submissionRequirementMatches === null || submissionRequirementMatches === void 0 ? void 0 : submissionRequirementMatches.forEach((srm) => {
            if (srm.from_nested) {
                this.remapMatches(verifiableCredentials, srm.from_nested, vcsToSend);
            }
            else {
                srm.vc_path.forEach((match, index, matches) => {
                    const vc = jsonpath_1.default.query(verifiableCredentials, match)[0];
                    const newIndex = vcsToSend === null || vcsToSend === void 0 ? void 0 : vcsToSend.findIndex((svc) => JSON.stringify(svc) === JSON.stringify(vc));
                    if (newIndex === -1) {
                        throw new Error(`The index of the VerifiableCredential in your current call can't be found in your previously submitted credentials. Are you trying to send a new Credential?\nverifiableCredential: ${vc}`);
                    }
                    matches[index] = `$[${newIndex}]`;
                });
                srm.name;
            }
        });
    }
    extractMatches(matchSubmissionRequirements) {
        const matches = [];
        matchSubmissionRequirements.forEach((e) => {
            matches.push(...e.vc_path);
            if (e.from_nested) {
                matches.push(...this.extractMatches(e.from_nested));
            }
        });
        return Array.from(new Set(matches));
    }
    matchSubmissionRequirements(pd, submissionRequirements, marked) {
        const submissionRequirementMatches = [];
        for (const sr of submissionRequirements) {
            if (sr.from) {
                const matchingDescriptors = this.mapMatchingDescriptors(pd, sr, marked);
                if (matchingDescriptors) {
                    sr.min ? (matchingDescriptors.min = sr.min) : undefined;
                    sr.max ? (matchingDescriptors.max = sr.max) : undefined;
                    sr.count ? (matchingDescriptors.count = sr.count) : undefined;
                    submissionRequirementMatches.push(matchingDescriptors);
                }
            }
            else if (sr.from_nested) {
                const srm = { name: pd.name || pd.id, rule: sr.rule, from_nested: [], vc_path: [] };
                if (srm && srm.from_nested) {
                    sr.min ? (srm.min = sr.min) : undefined;
                    sr.max ? (srm.max = sr.max) : undefined;
                    sr.count ? (srm.count = sr.count) : undefined;
                    srm.from_nested.push(...this.matchSubmissionRequirements(pd, sr.from_nested, marked));
                    submissionRequirementMatches.push(srm);
                }
            }
        }
        return submissionRequirementMatches;
    }
    matchWithoutSubmissionRequirements(marked, pd) {
        const submissionRequirementMatches = [];
        const partitionedResults = this.createVcToIdMap(marked);
        for (const [vcPath, sameVcIds] of partitionedResults.entries()) {
            if (sameVcIds.length && sameVcIds.length === pd.input_descriptors.length) {
                for (const idPath of sameVcIds) {
                    const idRes = utils_1.JsonPathUtils.extractInputField(pd, [idPath]);
                    if (idRes.length) {
                        submissionRequirementMatches.push({
                            name: idRes[0].value.name || idRes[0].value.id,
                            rule: pex_models_1.Rules.All,
                            vc_path: [vcPath],
                        });
                    }
                }
            }
        }
        return this.removeDuplicateSubmissionRequirementMatches(submissionRequirementMatches);
    }
    mapMatchingDescriptors(pd, sr, marked) {
        var _a, _b;
        const srm = { rule: sr.rule, from: [], vc_path: [] };
        if (sr === null || sr === void 0 ? void 0 : sr.from) {
            (_a = srm.from) === null || _a === void 0 ? void 0 : _a.push(sr.from);
            for (const m of marked) {
                const inDesc = jsonpath_1.default.query(pd, m.input_descriptor_path)[0];
                srm.name = inDesc.name || inDesc.id;
                if (m.payload.group.includes(sr.from)) {
                    if (((_b = srm.vc_path) === null || _b === void 0 ? void 0 : _b.indexOf(m.verifiable_credential_path)) === -1) {
                        srm.vc_path.push(m.verifiable_credential_path);
                    }
                }
            }
        }
        return srm;
    }
    evaluate(pd, wvcs, opts) {
        var _a, _b, _c, _d;
        this._client.evaluate(pd, wvcs, opts);
        const result = {
            areRequiredCredentialsPresent: ConstraintUtils_1.Status.INFO,
            verifiableCredential: wvcs.map((wrapped) => wrapped.original),
        };
        result.warnings = this.formatNotInfo(ConstraintUtils_1.Status.WARN);
        result.errors = this.formatNotInfo(ConstraintUtils_1.Status.ERROR);
        this._client.assertPresentationSubmission();
        if ((_a = this._client.presentationSubmission) === null || _a === void 0 ? void 0 : _a.descriptor_map.length) {
            const len = (_b = this._client.presentationSubmission) === null || _b === void 0 ? void 0 : _b.descriptor_map.length;
            for (let i = 0; i < len; i++) {
                this._client.presentationSubmission.descriptor_map[i] &&
                    this._client.presentationSubmission.descriptor_map.push(this._client.presentationSubmission.descriptor_map[i]);
            }
            this._client.presentationSubmission.descriptor_map.splice(0, len); // cut the array and leave only the non-empty values
            result.value = JSON.parse(JSON.stringify(this._client.presentationSubmission));
        }
        if (this._client.generatePresentationSubmission) {
            this.updatePresentationSubmissionPathToAlias('verifiableCredential', result.value);
        }
        result.verifiableCredential = this._client.wrappedVcs.map((wrapped) => wrapped.original);
        result.areRequiredCredentialsPresent = ((_d = (_c = result.value) === null || _c === void 0 ? void 0 : _c.descriptor_map) === null || _d === void 0 ? void 0 : _d.length) ? ConstraintUtils_1.Status.INFO : ConstraintUtils_1.Status.ERROR;
        return result;
    }
    formatNotInfo(status) {
        return this._client.results
            .filter((result) => result.status === status)
            .map((x) => {
            const vcPath = x.verifiable_credential_path.substring(1);
            return {
                tag: x.evaluator,
                status: x.status,
                message: `${x.message}: ${x.input_descriptor_path}: $.verifiableCredential${vcPath}`,
            };
        });
    }
    submissionFrom(pd, vcs) {
        if (!this._client.results.length) {
            throw Error('You need to call evaluate() before pex.presentationFrom()');
        }
        if (!this._client.generatePresentationSubmission) {
            return this._client.presentationSubmission;
        }
        if (pd.submission_requirements) {
            const marked = this._client.results.filter((result) => result.evaluator === 'MarkForSubmissionEvaluation' && result.payload.group && result.status !== ConstraintUtils_1.Status.ERROR);
            const [updatedMarked, upIdx] = this.matchUserSelectedVcs(marked, vcs);
            const groupCount = new Map();
            //TODO instanceof fails in some cases, need to check how to fix it
            if (Object.keys(pd).includes('input_descriptors')) {
                pd.input_descriptors.forEach((e) => {
                    if (e.group) {
                        e.group.forEach((key) => {
                            if (groupCount.has(key)) {
                                groupCount.set(key, groupCount.get(key) + 1);
                            }
                            else {
                                groupCount.set(key, 1);
                            }
                        });
                    }
                });
            }
            const result = this.evaluateRequirements(pd.submission_requirements, updatedMarked, groupCount, 0);
            const finalIdx = upIdx.filter((ui) => result[1].find((r) => r.verifiable_credential_path === ui[1]));
            this.updatePresentationSubmission(finalIdx);
            this.updatePresentationSubmissionPathToAlias('verifiableCredential');
            return this._client.presentationSubmission;
        }
        const marked = this._client.results.filter((result) => result.evaluator === 'MarkForSubmissionEvaluation' && result.status !== ConstraintUtils_1.Status.ERROR);
        const updatedIndexes = this.matchUserSelectedVcs(marked, vcs);
        this.updatePresentationSubmission(updatedIndexes[1]);
        this.updatePresentationSubmissionPathToAlias('verifiableCredential');
        return this._client.presentationSubmission;
    }
    updatePresentationSubmission(updatedIndexes) {
        if (!this._client.generatePresentationSubmission) {
            return; // never update a supplied submission
        }
        this._client.presentationSubmission.descriptor_map = this._client.presentationSubmission.descriptor_map
            .filter((descriptor) => updatedIndexes.find((ui) => ui[0] === descriptor.path))
            .map((descriptor) => {
            const result = updatedIndexes.find((ui) => ui[0] === descriptor.path);
            if (result) {
                descriptor.path = result[1];
            }
            return descriptor;
        });
    }
    matchUserSelectedVcs(marked, vcs) {
        const userSelected = vcs.map((vc, index) => [index, JSON.stringify(vc.original)]);
        const allCredentials = this._client.wrappedVcs.map((vc, index) => [index, JSON.stringify(vc.original)]);
        const updatedIndexes = [];
        userSelected.forEach((us, i) => {
            allCredentials.forEach((ac, j) => {
                if (ac[1] === us[1]) {
                    updatedIndexes.push([`$[${j}]`, `$[${i}]`]);
                }
            });
        });
        marked = marked
            .filter((m) => updatedIndexes.find((ui) => ui[0] === m.verifiable_credential_path))
            .map((m) => {
            const index = updatedIndexes.find((ui) => ui[0] === m.verifiable_credential_path);
            if (index) {
                m.verifiable_credential_path = index[1];
            }
            return m;
        });
        return [marked, updatedIndexes];
    }
    evaluateRequirements(submissionRequirement, marked, groupCount, level) {
        let total = 0;
        const result = [];
        for (const sr of submissionRequirement) {
            if (sr.from) {
                if (sr.rule === pex_models_1.Rules.All) {
                    const [count, matched] = this.countMatchingInputDescriptors(sr, marked);
                    if (count !== groupCount.get(sr.from)) {
                        throw Error(`Not all input descriptors are members of group ${sr.from}`);
                    }
                    total++;
                    result.push(...matched);
                }
                else if (sr.rule === pex_models_1.Rules.Pick) {
                    const [count, matched] = this.countMatchingInputDescriptors(sr, marked);
                    try {
                        this.handleCount(sr, count, level);
                        total++;
                    }
                    catch (error) {
                        if (level === 0)
                            throw error;
                    }
                    result.push(...matched);
                }
            }
            else if (sr.from_nested) {
                const [count, matched] = this.evaluateRequirements(sr.from_nested, marked, groupCount, ++level);
                total += count;
                result.push(...matched);
                this.handleCount(sr, count, level);
            }
        }
        return [total, result];
    }
    countMatchingInputDescriptors(submissionRequirement, marked) {
        let count = 0;
        const matched = [];
        for (const m of marked) {
            if (m.payload.group.includes(submissionRequirement.from)) {
                matched.push(m);
                count++;
            }
        }
        return [count, matched];
    }
    handleCount(submissionRequirement, count, level) {
        if (submissionRequirement.count) {
            if (count !== submissionRequirement.count) {
                throw Error(`Count: expected: ${submissionRequirement.count} actual: ${count} at level: ${level}`);
            }
        }
        if (submissionRequirement.min) {
            if (count < submissionRequirement.min) {
                throw Error(`Min: expected: ${submissionRequirement.min} actual: ${count} at level: ${level}`);
            }
        }
        if (submissionRequirement.max) {
            if (count > submissionRequirement.max) {
                throw Error(`Max: expected: ${submissionRequirement.max} actual: ${count} at level: ${level}`);
            }
        }
    }
    removeDuplicateSubmissionRequirementMatches(matches) {
        return matches.filter((match, index) => {
            const _match = JSON.stringify(match);
            return (index ===
                matches.findIndex((obj) => {
                    return JSON.stringify(obj) === _match;
                }));
        });
    }
    fillSelectableCredentialsToVerifiableCredentialsMapping(selectResults, wrappedVcs) {
        var _a;
        if (selectResults) {
            (_a = selectResults.verifiableCredential) === null || _a === void 0 ? void 0 : _a.forEach((selectableCredential) => {
                var _a;
                const foundIndex = wrappedVcs.findIndex((wrappedVc) => JSON.stringify(selectableCredential) === JSON.stringify(wrappedVc.original));
                if (foundIndex === -1) {
                    throw new Error('index is not right');
                }
                (_a = selectResults.vcIndexes) === null || _a === void 0 ? void 0 : _a.push(foundIndex);
            });
        }
    }
    determineAreRequiredCredentialsPresent(matchSubmissionRequirements, parentMsr) {
        let status = ConstraintUtils_1.Status.INFO;
        if (!matchSubmissionRequirements || !matchSubmissionRequirements.length) {
            return ConstraintUtils_1.Status.ERROR;
        }
        if (!parentMsr) {
            const childStatuses = [];
            for (const m of matchSubmissionRequirements) {
                childStatuses.push(this.determineSubmissionRequirementStatus(m));
            }
            if (childStatuses.filter((status) => status === ConstraintUtils_1.Status.ERROR).length) {
                return ConstraintUtils_1.Status.ERROR;
            }
            else if (childStatuses.filter((status) => status === ConstraintUtils_1.Status.WARN).length) {
                return ConstraintUtils_1.Status.WARN;
            }
            else {
                return ConstraintUtils_1.Status.INFO;
            }
        }
        else {
            const childStatuses = [];
            for (const m of matchSubmissionRequirements) {
                childStatuses.push(this.determineSubmissionRequirementStatus(m));
            }
            if (parentMsr.rule === pex_models_1.Rules.All && childStatuses.filter((status) => status === ConstraintUtils_1.Status.ERROR).length) {
                return ConstraintUtils_1.Status.ERROR;
            }
            const nonErrStatCount = childStatuses.filter((status) => status !== ConstraintUtils_1.Status.ERROR).length;
            if (parentMsr.count && parentMsr.count < nonErrStatCount) {
                return ConstraintUtils_1.Status.ERROR;
            }
            else if (parentMsr.count && parentMsr.count > nonErrStatCount) {
                status = ConstraintUtils_1.Status.WARN;
            }
            else if (parentMsr.min && parentMsr.min > nonErrStatCount) {
                return ConstraintUtils_1.Status.ERROR;
            }
            else if (parentMsr.max && parentMsr.max < nonErrStatCount) {
                status = ConstraintUtils_1.Status.WARN;
            }
        }
        return status;
    }
    determineSubmissionRequirementStatus(m) {
        var _a, _b, _c, _d;
        let innerStatus = ConstraintUtils_1.Status.INFO;
        if (m.from && m.from_nested) {
            throw new Error('Invalid submission_requirement object: MUST contain either a from or from_nested property.');
        }
        if (!m.from && !m.from_nested && m.vc_path.length !== 1) {
            innerStatus = ConstraintUtils_1.Status.ERROR;
        }
        if (m.from) {
            if (m.rule === pex_models_1.Rules.All && m.vc_path.length !== 1) {
                innerStatus = ConstraintUtils_1.Status.ERROR;
            }
            if (m.rule === pex_models_1.Rules.Pick) {
                if (m.vc_path.length == 0 && (!m.from_nested || m.from_nested.length == 0)) {
                    innerStatus = ConstraintUtils_1.Status.ERROR;
                }
                else if (m.count && m.vc_path.length < m.count && (!m.from_nested || !((_a = m.from_nested) === null || _a === void 0 ? void 0 : _a.length))) {
                    innerStatus = ConstraintUtils_1.Status.ERROR;
                }
                else if (m.count && (m.vc_path.length > m.count || (m.from_nested && ((_b = m.from_nested) === null || _b === void 0 ? void 0 : _b.length) > m.count))) {
                    innerStatus = ConstraintUtils_1.Status.WARN;
                }
                else if (m.min && m.vc_path.length < m.min && m.from_nested && !((_c = m.from_nested) === null || _c === void 0 ? void 0 : _c.length)) {
                    innerStatus = ConstraintUtils_1.Status.ERROR;
                }
                else if (m.max && (m.vc_path.length > m.max || (m.from_nested && ((_d = m.from_nested) === null || _d === void 0 ? void 0 : _d.length) > m.max))) {
                    innerStatus = ConstraintUtils_1.Status.WARN;
                }
                else if (m.rule === pex_models_1.Rules.All && m.vc_path.length > 1) {
                    innerStatus = ConstraintUtils_1.Status.ERROR;
                }
            }
        }
        else if (m.from_nested) {
            innerStatus = this.determineAreRequiredCredentialsPresent(m.from_nested, m);
        }
        return innerStatus;
    }
    updateSubmissionRequirementMatchPathToAlias(submissionRequirementMatch, alias) {
        const vc_path = [];
        submissionRequirementMatch.vc_path.forEach((m) => {
            vc_path.push(m.replace('$', '$.' + alias));
        });
        submissionRequirementMatch.vc_path = vc_path;
        if (submissionRequirementMatch.from_nested) {
            submissionRequirementMatch.from_nested.forEach((f) => {
                this.updateSubmissionRequirementMatchPathToAlias(f, alias);
            });
        }
    }
    updatePresentationSubmissionPathToAlias(alias, presentationSubmission) {
        if (presentationSubmission) {
            presentationSubmission.descriptor_map.forEach((d) => {
                this.replacePathWithAlias(d, alias);
            });
        }
        else if (this._client.generatePresentationSubmission) {
            this._client.presentationSubmission.descriptor_map.forEach((d) => {
                this.replacePathWithAlias(d, alias);
            });
        }
    }
    replacePathWithAlias(descriptor, alias) {
        descriptor.path = descriptor.path.replace('$', '$.' + alias);
        if (descriptor.path_nested) {
            this.replacePathWithAlias(descriptor.path_nested, alias);
        }
    }
    createVcToIdMap(marked) {
        const partitionedResults = new Map();
        const partitionedBasedOnVc = new Map();
        for (let i = 0; i < marked.length; i++) {
            const currentVcPath = marked[i].verifiable_credential_path;
            if (partitionedBasedOnVc.has(currentVcPath)) {
                const partBasedOnVc = partitionedBasedOnVc.get(currentVcPath);
                if (partBasedOnVc) {
                    partBasedOnVc.push(marked[i]);
                }
            }
            else {
                partitionedBasedOnVc.set(currentVcPath, [marked[i]]);
            }
        }
        for (const [idPath, sameVcCheckResults] of partitionedBasedOnVc.entries()) {
            const idPaths = [];
            for (let i = 0; i < sameVcCheckResults.length; i++) {
                if (idPaths.indexOf(sameVcCheckResults[i].input_descriptor_path) === -1) {
                    idPaths.push(sameVcCheckResults[i].input_descriptor_path);
                }
            }
            partitionedResults.set(idPath, idPaths);
        }
        return partitionedResults;
    }
}
exports.EvaluationClientWrapper = EvaluationClientWrapper;
//# sourceMappingURL=data:application/json;base64,