"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSITypesBuilder = void 0;
const ssi_types_1 = require("@sphereon/ssi-types");
const utils_1 = require("../utils");
const Internal_types_1 = require("./Internal.types");
class SSITypesBuilder {
    static modelEntityToInternalPresentationDefinitionV1(p) {
        const pd = SSITypesBuilder.createCopyAndModifyPresentationDefinition(p);
        return new Internal_types_1.InternalPresentationDefinitionV1(pd.id, pd.input_descriptors, pd.format, pd.name, pd.purpose, pd.submission_requirements);
    }
    static modelEntityInternalPresentationDefinitionV2(p) {
        const pd = SSITypesBuilder.createCopyAndModifyPresentationDefinition(p);
        return new Internal_types_1.InternalPresentationDefinitionV2(pd.id, pd.input_descriptors, pd.format, pd.frame, pd.name, pd.purpose, pd.submission_requirements);
    }
    static createCopyAndModifyPresentationDefinition(p) {
        const pd = JSON.parse(JSON.stringify(p));
        utils_1.JsonPathUtils.changePropertyNameRecursively(pd, '_const', 'const');
        utils_1.JsonPathUtils.changePropertyNameRecursively(pd, '_enum', 'enum');
        utils_1.JsonPathUtils.changeSpecialPathsRecursively(pd);
        return pd;
    }
    static mapExternalVerifiablePresentationToWrappedVP(presentation) {
        return ssi_types_1.CredentialMapper.toWrappedVerifiablePresentation(presentation);
    }
    static mapExternalVerifiableCredentialsToWrappedVcs(verifiableCredentials) {
        return ssi_types_1.CredentialMapper.toWrappedVerifiableCredentials(Array.isArray(verifiableCredentials) ? verifiableCredentials : [verifiableCredentials]);
    }
    static toInternalPresentationDefinition(presentationDefinition) {
        const presentationDefinitionCopy = JSON.parse(JSON.stringify(presentationDefinition));
        const versionResult = (0, utils_1.definitionVersionDiscovery)(presentationDefinitionCopy);
        if (versionResult.error)
            throw versionResult.error;
        if (versionResult.version == Internal_types_1.PEVersion.v1) {
            return SSITypesBuilder.modelEntityToInternalPresentationDefinitionV1(presentationDefinitionCopy);
        }
        return SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinitionCopy);
    }
}
exports.SSITypesBuilder = SSITypesBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU1NJVHlwZXNCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL3R5cGVzL1NTSVR5cGVzQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSxtREFPNkI7QUFFN0Isb0NBQXFFO0FBRXJFLHFEQU8wQjtBQUUxQixNQUFhLGVBQWU7SUFDbkIsTUFBTSxDQUFDLDZDQUE2QyxDQUFDLENBQU87UUFDakUsTUFBTSxFQUFFLEdBQVMsZUFBZSxDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBUyxDQUFDO1FBQ3RGLE9BQU8sSUFBSSxpREFBZ0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUN2SSxDQUFDO0lBRU0sTUFBTSxDQUFDLDJDQUEyQyxDQUFDLENBQU87UUFDL0QsTUFBTSxFQUFFLEdBQVMsZUFBZSxDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlFLE9BQU8sSUFBSSxpREFBZ0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2pKLENBQUM7SUFFRCxNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBMEI7UUFDekUsTUFBTSxFQUFFLEdBQTRCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLHFCQUFhLENBQUMsNkJBQTZCLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuRSxxQkFBYSxDQUFDLDZCQUE2QixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakUscUJBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxNQUFNLENBQUMsNENBQTRDLENBQ2pELFlBQStFO1FBRS9FLE9BQU8sNEJBQWdCLENBQUMsK0JBQStCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELE1BQU0sQ0FBQyw0Q0FBNEMsQ0FDakQscUJBQW9GO1FBRXBGLE9BQU8sNEJBQWdCLENBQUMsOEJBQThCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDakosQ0FBQztJQUVELE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxzQkFBK0M7UUFDckYsTUFBTSwwQkFBMEIsR0FBNEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztRQUMvRyxNQUFNLGFBQWEsR0FBc0IsSUFBQSxrQ0FBMEIsRUFBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ2hHLElBQUksYUFBYSxDQUFDLEtBQUs7WUFBRSxNQUFNLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDbkQsSUFBSSxhQUFhLENBQUMsT0FBTyxJQUFJLDBCQUFTLENBQUMsRUFBRSxFQUFFO1lBQ3pDLE9BQU8sZUFBZSxDQUFDLDZDQUE2QyxDQUFDLDBCQUFzRCxDQUFDLENBQUM7U0FDOUg7UUFDRCxPQUFPLGVBQWUsQ0FBQywyQ0FBMkMsQ0FBQywwQkFBc0QsQ0FBQyxDQUFDO0lBQzdILENBQUM7Q0FDRjtBQXhDRCwwQ0F3Q0MifQ==