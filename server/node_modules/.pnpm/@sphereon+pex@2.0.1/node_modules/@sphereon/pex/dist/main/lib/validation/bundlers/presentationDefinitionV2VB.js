"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PresentationDefinitionV2VB = void 0;
const ajv_1 = __importDefault(require("ajv"));
const jwtAlgos_1 = require("../core/jwtAlgos");
const ldpTypes_1 = require("../core/ldpTypes");
const presentationDefinitionSchema_1 = require("../core/presentationDefinitionSchema");
const frameVB_1 = require("./frameVB");
const inputDescriptorsV2VB_1 = require("./inputDescriptorsV2VB");
const submissionRequirementVB_1 = require("./submissionRequirementVB");
const validationBundler_1 = require("./validationBundler");
class PresentationDefinitionV2VB extends validationBundler_1.ValidationBundler {
    constructor(parentTag) {
        super(parentTag, 'presentation_definition');
        this.ajv = new ajv_1.default({ verbose: true, allowUnionTypes: true, allErrors: true, strict: false });
    }
    getValidations(pd) {
        let validations = [];
        if (pd.submission_requirements) {
            validations = [
                ...this.myValidations(pd),
                ...new inputDescriptorsV2VB_1.InputDescriptorsV2VB(this.myTag).getValidations(pd.input_descriptors),
                ...new submissionRequirementVB_1.SubmissionRequirementVB(this.myTag).getValidations(pd.submission_requirements),
            ];
        }
        else {
            validations = [...this.myValidations(pd), ...new inputDescriptorsV2VB_1.InputDescriptorsV2VB(this.myTag).getValidations(pd.input_descriptors)];
        }
        if (pd.frame) {
            validations.push(...new frameVB_1.FrameVB(this.myTag).getValidations(pd.frame));
        }
        return validations;
    }
    myValidations(pd) {
        return [
            // E Section 4.B   : The Input Descriptors (#term:input-descriptors) required for submission are described by the submission_requirements. If no submission_requirements value is present, all inputs listed in the input_descriptors array are required for submission.
            {
                tag: this.getTag(),
                target: pd,
                predicate: (pd) => pd != null,
                message: 'presentation_definition should be non null.',
            },
            {
                tag: this.getTag(),
                target: pd,
                predicate: this.shouldBeAsPerJsonSchema(),
                message: 'presentation_definition should be as per json schema.',
            },
            {
                tag: this.getTag(),
                target: pd,
                predicate: (pd) => PresentationDefinitionV2VB.nonEmptyString(pd === null || pd === void 0 ? void 0 : pd.id),
                message: 'id should not be empty',
            },
            {
                tag: this.getTag(),
                target: pd,
                predicate: (pd) => PresentationDefinitionV2VB.optionalNonEmptyString(pd === null || pd === void 0 ? void 0 : pd.name),
                message: 'name should be a non-empty string',
            },
            {
                tag: this.getTag(),
                target: pd,
                predicate: (pd) => PresentationDefinitionV2VB.optionalNonEmptyString(pd === null || pd === void 0 ? void 0 : pd.purpose),
                message: 'purpose should be a non-empty string',
            },
            {
                tag: this.getTag(),
                target: pd,
                predicate: (pd) => PresentationDefinitionV2VB.formatValuesShouldNotBeEmpty(pd === null || pd === void 0 ? void 0 : pd.format),
                message: 'formats values should not empty',
            },
            {
                tag: this.getTag(),
                target: pd,
                predicate: (pd) => PresentationDefinitionV2VB.formatValuesShouldBeAmongKnownValues(pd === null || pd === void 0 ? void 0 : pd.format),
                message: 'formats should only have known identifiers for alg or proof_type',
            },
            {
                tag: this.getTag(),
                target: pd,
                predicate: (pd) => PresentationDefinitionV2VB.groupShouldMatchSubmissionRequirements(pd),
                message: 'input descriptor group should match the from in submission requirements.',
            },
        ];
    }
    static optionalNonEmptyString(str) {
        // TODO extract to generic utils or use something like lodash
        return str == null || str.length > 0;
    }
    static nonEmptyString(id) {
        // TODO extract to generic utils or use something like lodash
        return id != null && id.length > 0;
    }
    static formatValuesShouldNotBeEmpty(format) {
        var _a, _b, _c, _d, _e, _f;
        let areExpectedValuesPresent = true;
        if ((format === null || format === void 0 ? void 0 : format.jwt) != null) {
            areExpectedValuesPresent = areExpectedValuesPresent && ((_a = format.jwt.alg) === null || _a === void 0 ? void 0 : _a.length) > 0;
        }
        if ((format === null || format === void 0 ? void 0 : format.jwt_vc) != null) {
            areExpectedValuesPresent = areExpectedValuesPresent && ((_b = format.jwt_vc.alg) === null || _b === void 0 ? void 0 : _b.length) > 0;
        }
        if ((format === null || format === void 0 ? void 0 : format.jwt_vp) != null) {
            areExpectedValuesPresent = areExpectedValuesPresent && ((_c = format.jwt_vp.alg) === null || _c === void 0 ? void 0 : _c.length) > 0;
        }
        if ((format === null || format === void 0 ? void 0 : format.ldp) != null) {
            areExpectedValuesPresent = areExpectedValuesPresent && ((_d = format.ldp.proof_type) === null || _d === void 0 ? void 0 : _d.length) > 0;
        }
        if ((format === null || format === void 0 ? void 0 : format.ldp_vc) != null) {
            areExpectedValuesPresent = areExpectedValuesPresent && ((_e = format.ldp_vc.proof_type) === null || _e === void 0 ? void 0 : _e.length) > 0;
        }
        if ((format === null || format === void 0 ? void 0 : format.ldp_vp) != null) {
            areExpectedValuesPresent = areExpectedValuesPresent && ((_f = format.ldp_vp.proof_type) === null || _f === void 0 ? void 0 : _f.length) > 0;
        }
        return areExpectedValuesPresent;
    }
    static formatValuesShouldBeAmongKnownValues(format) {
        let unknownProofsAndAlgorithms = [];
        if (format) {
            const jwtAlgos = jwtAlgos_1.JwtAlgos.getJwtAlgos();
            const ldpTypes = ldpTypes_1.LdpTypes.getLdpTypes();
            unknownProofsAndAlgorithms = [];
            for (const [key, value] of Object.entries(format)) {
                if (key.startsWith('jwt')) {
                    unknownProofsAndAlgorithms.push(...PresentationDefinitionV2VB.isJWTAlgoKnown(value, jwtAlgos));
                }
                else {
                    unknownProofsAndAlgorithms.push(...PresentationDefinitionV2VB.isLDPProofKnown(value, ldpTypes));
                }
            }
        }
        return unknownProofsAndAlgorithms.length === 0;
    }
    static isJWTAlgoKnown(jwtObject, jwtAlgos) {
        const unknownAlgorithms = [];
        if (jwtObject != null && jwtObject.alg != null) {
            for (const jwtAlgo of jwtObject.alg) {
                if (!jwtAlgos.includes(jwtAlgo)) {
                    unknownAlgorithms.push(jwtAlgo);
                }
            }
        }
        return unknownAlgorithms;
    }
    static isLDPProofKnown(ldpObject, ldpTypes) {
        const unknownProofType = [];
        if (ldpObject != null && ldpObject.proof_type != null) {
            for (const ldpProof of ldpObject.proof_type) {
                if (!ldpTypes.includes(ldpProof)) {
                    unknownProofType.push(ldpProof);
                }
            }
        }
        return unknownProofType;
    }
    static groupShouldMatchSubmissionRequirements(pd) {
        if (pd.submission_requirements != null && pd.submission_requirements.length > 0) {
            const groups = [];
            pd.input_descriptors.forEach((inDesc) => {
                if (inDesc.group) {
                    groups.push(...inDesc.group);
                }
            });
            const groupStrings = new Set(groups);
            const fromValues = [];
            PresentationDefinitionV2VB.flatten(pd.submission_requirements).forEach((srs) => {
                if (srs.from) {
                    fromValues.push(...srs.from);
                }
            });
            const fromValueStrings = new Set(fromValues);
            const difference = new Set([...fromValueStrings].filter((x) => x != null && x.length > 0 && !groupStrings.has(x)));
            return difference.size === 0;
        }
        return true;
    }
    static flatten(srs) {
        return srs === null || srs === void 0 ? void 0 : srs.reduce((accumulator, submissionRequirement) => accumulator.concat(Array.isArray(submissionRequirement.from_nested) ? this.flatten(submissionRequirement.from_nested) : submissionRequirement), []);
    }
    shouldBeAsPerJsonSchema() {
        // TODO can be be extracted as a generic function
        return (presentationDefinition) => {
            const presentationDefinitionSchema = presentationDefinitionSchema_1.PresentationDefinitionSchema.getPresentationDefinitionSchemaV2();
            const validate = this.ajv.compile(presentationDefinitionSchema);
            const valid = validate({ presentation_definition: presentationDefinition });
            return valid;
        };
    }
}
exports.PresentationDefinitionV2VB = PresentationDefinitionV2VB;
//# sourceMappingURL=data:application/json;base64,