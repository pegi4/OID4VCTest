import { Optionality } from '@sphereon/pex-models';
import { Status } from '../../ConstraintUtils';
import PexMessages from '../../types/Messages';
import { AbstractEvaluationHandler } from './abstractEvaluationHandler';
export class PredicateRelatedFieldEvaluationHandler extends AbstractEvaluationHandler {
    constructor(client) {
        super(client);
    }
    getName() {
        return 'PredicateRelatedFieldEvaluation';
    }
    handle(pd) {
        // PresentationDefinitionV2 is the common denominator
        pd.input_descriptors.forEach((inDesc, index) => {
            if (inDesc.constraints) {
                this.examinePredicateRelatedField(index, inDesc.constraints);
            }
        });
        // this.updatePresentationSubmission(pdV1);
    }
    examinePredicateRelatedField(input_descriptor_idx, constraints) {
        if (constraints?.fields) {
            for (let i = 0; i < constraints.fields.length; i++) {
                for (let j = 0; j < this.getResults().length; j++) {
                    this.examinePredicateForFilterEvaluationResult(this.getResults(), j, input_descriptor_idx, constraints, i);
                }
            }
        }
    }
    examinePredicateForFilterEvaluationResult(results, resultIdx, input_descriptor_idx, constraints, fieldIdx) {
        const resultInputDescriptorIdx = this.retrieveResultInputDescriptorIdx(results[resultIdx].input_descriptor_path);
        if (results[resultIdx].payload &&
            results[resultIdx].payload.result &&
            results[resultIdx].payload.result.path &&
            results[resultIdx].evaluator === 'FilterEvaluation' &&
            input_descriptor_idx === resultInputDescriptorIdx &&
            constraints &&
            constraints.fields &&
            constraints.fields[fieldIdx] &&
            constraints.fields[fieldIdx].predicate &&
            constraints.fields[fieldIdx].path &&
            constraints.fields[fieldIdx].path?.includes(this.concatenatePath(results[resultIdx].payload.result.path))) {
            const evaluationResult = { ...results[resultIdx].payload.result };
            const resultObject = this.createResultObject(input_descriptor_idx, resultIdx, evaluationResult, results);
            if (constraints.fields[fieldIdx].predicate === Optionality.Required) {
                results.push(resultObject);
            }
            else {
                resultObject.payload['value'] = true;
                results.push(resultObject);
            }
        }
    }
    retrieveResultInputDescriptorIdx(input_descriptor_path) {
        const inputDescriptorText = '$.input_descriptors[';
        const startIdx = input_descriptor_path.indexOf(inputDescriptorText);
        const startWithIdx = input_descriptor_path.substring(startIdx + inputDescriptorText.length);
        const endIdx = startWithIdx.indexOf(']');
        const idx = startWithIdx.substring(0, endIdx);
        return parseInt(idx);
    }
    concatenatePath(path) {
        let completePath = '';
        for (let i = 0; i < path.length; i++) {
            if (typeof path[i] === 'number') {
                completePath = completePath.substring(0, completePath.length - 1);
                completePath += '[*].';
            }
            else {
                completePath += path[i] + '.';
            }
        }
        return completePath.substring(0, completePath.length - 1);
    }
    createResultObject(input_descriptor_idx, resultIdx, evaluationResult, results) {
        return {
            input_descriptor_path: `$.input_descriptors[${input_descriptor_idx}]`,
            verifiable_credential_path: results[resultIdx].verifiable_credential_path,
            evaluator: this.getName(),
            status: Status.INFO,
            message: PexMessages.INPUT_CANDIDATE_IS_ELIGIBLE_FOR_PRESENTATION_SUBMISSION,
            payload: evaluationResult,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZGljYXRlUmVsYXRlZEZpZWxkRXZhbHVhdGlvbkhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvZXZhbHVhdGlvbi9oYW5kbGVycy9wcmVkaWNhdGVSZWxhdGVkRmllbGRFdmFsdWF0aW9uSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1ELFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBHLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQyxPQUFPLFdBQVcsTUFBTSxzQkFBc0IsQ0FBQztBQUkvQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV4RSxNQUFNLE9BQU8sc0NBQXVDLFNBQVEseUJBQXlCO0lBQ25GLFlBQVksTUFBd0I7UUFDbEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxpQ0FBaUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEVBQW1DO1FBQy9DLHFEQUFxRDtRQUNwRCxFQUF1QyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQXlCLEVBQUUsS0FBYSxFQUFFLEVBQUU7WUFDOUcsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUN0QixJQUFJLENBQUMsNEJBQTRCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUM5RDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsMkNBQTJDO0lBQzdDLENBQUM7SUFFTyw0QkFBNEIsQ0FBQyxvQkFBNEIsRUFBRSxXQUEwQztRQUMzRyxJQUFJLFdBQVcsRUFBRSxNQUFNLEVBQUU7WUFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxF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