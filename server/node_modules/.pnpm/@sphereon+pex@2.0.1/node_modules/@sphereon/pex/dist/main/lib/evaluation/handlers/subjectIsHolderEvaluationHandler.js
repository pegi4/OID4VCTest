"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubjectIsHolderEvaluationHandler = void 0;
const pex_models_1 = require("@sphereon/pex-models");
const jsonpath_1 = __importDefault(require("jsonpath"));
const ConstraintUtils_1 = require("../../ConstraintUtils");
const abstractEvaluationHandler_1 = require("./abstractEvaluationHandler");
class SubjectIsHolderEvaluationHandler extends abstractEvaluationHandler_1.AbstractEvaluationHandler {
    constructor(client) {
        super(client);
        this.fieldIdzInputDescriptorsSameSubjectRequired = new Map();
        this.fieldIdzInputDescriptorsSameSubjectPreferred = new Map();
        this.isHolder = [];
        this.fieldIds = [];
        this.credentialsSubjectsByPath = new Map();
        this.credentialsByPath = new Map();
        this.messages = new Map();
        this.messages.set(ConstraintUtils_1.Status.INFO, 'The field ids requiring the subject to be the holder');
        this.messages.set(ConstraintUtils_1.Status.WARN, 'The field ids preferring the subject to be the holder');
        this.messages.set(ConstraintUtils_1.Status.ERROR, 'The field id missing');
    }
    getName() {
        return 'IsHolderEvaluation';
    }
    handle(pd, wrappedVcs) {
        this.findIsHolderFieldIdsToInputDescriptorsSets(pd);
        this.findAllCredentialSubjects(wrappedVcs);
        this.confirmAllFieldSetHasSameSubject(this.fieldIdzInputDescriptorsSameSubjectRequired, ConstraintUtils_1.Status.INFO, pex_models_1.Optionality.Required);
        this.confirmAllFieldSetHasSameSubject(this.fieldIdzInputDescriptorsSameSubjectPreferred, ConstraintUtils_1.Status.WARN, pex_models_1.Optionality.Preferred);
        this.updatePresentationSubmission(pd);
    }
    /**
     * We have input descriptor to field ids mapping. This function gets a (reverse) map from field id to input descriptor
     */
    findIsHolderFieldIdsToInputDescriptorsSets(pd) {
        var _a;
        this.fieldIds.push(...jsonpath_1.default.nodes(pd, '$..fields[*].id'));
        this.isHolder.push(...jsonpath_1.default.nodes(pd, '$..is_holder[*]'));
        const fields = (_a = this.fieldIds) === null || _a === void 0 ? void 0 : _a.map((n) => n.value);
        const error = [];
        error.push(...this.evaluateFields(this.fieldIdzInputDescriptorsSameSubjectPreferred, this.isHolder, fields, pex_models_1.Optionality.Preferred));
        error.push(...this.evaluateFields(this.fieldIdzInputDescriptorsSameSubjectRequired, this.isHolder, fields, pex_models_1.Optionality.Required));
        error.forEach((q) => this.getResults().push(this.createResult(q[1], q[0], ['', {}], ConstraintUtils_1.Status.ERROR, undefined)));
    }
    evaluateFields(fieldsMapping, isHolder, fields, directive) {
        const error = [];
        isHolder
            .filter((d) => d.value.directive === directive)
            .filter((e) => e.value.field_id.every((id) => fields.includes(id)))
            .forEach((p) => fieldsMapping.set(jsonpath_1.default.stringify(p.path.slice(0, 3)), p.value.field_id));
        isHolder
            .filter((d) => d.value.directive === directive)
            .filter((e) => !e.value.field_id.every((id) => fields.includes(id)))
            .forEach((p) => error.push([jsonpath_1.default.stringify(p.path.slice(0, 3)), p.value.field_id]));
        return error;
    }
    findAllCredentialSubjects(wrappedVcs) {
        //TODO handle nested path
        const credentialSubjects = jsonpath_1.default.nodes(wrappedVcs.map((wvc) => wvc.credential), '$..credentialSubject');
        for (let idx = 0; idx < credentialSubjects.length; idx++) {
            const cs = credentialSubjects[idx];
            const path = jsonpath_1.default.stringify(cs.path.slice(0, 2));
            this.credentialsSubjectsByPath.set(path, cs.value);
            this.credentialsByPath.set(path, wrappedVcs[idx]);
        }
    }
    confirmAllFieldSetHasSameSubject(fieldIdsInputDescriptorsGroups, status, directive) {
        const subjectsMatchingFields = Array.from(fieldIdsInputDescriptorsGroups).flatMap((k) => Array.from(this.credentialsSubjectsByPath).filter((a) => k[1].find((c) => Object.keys(a[1]).includes(c))));
        const credentialPathsToInputDescriptors = this.mapCredentialPathsToInputDescriptors(directive);
        const fields = Array.from(subjectsMatchingFields).flatMap((s) => Object.keys(s[1]).filter((w) => w !== 'id'));
        const allFieldsMatched = Array.from(fieldIdsInputDescriptorsGroups.values()).flatMap((v) => v.every((e) => fields.includes(e)))[0];
        subjectsMatchingFields.forEach((subject) => {
            const inDescPath = credentialPathsToInputDescriptors.get(subject[0]);
            if (allFieldsMatched && subject[1].id && this.client.dids.includes(subject[1].id)) {
                this.getResults().push(this.createResult(Object.keys(subject[1]).filter((k) => k !== 'id'), inDescPath, subject, status, this.credentialsByPath.get(subject[0])));
            }
            else {
                this.getResults().push(this.createResult(Object.keys(subject[1]).filter((k) => k !== 'id'), inDescPath, subject, ConstraintUtils_1.Status.ERROR, this.credentialsByPath.get(subject[0])));
            }
        });
    }
    mapCredentialPathsToInputDescriptors(directive) {
        var _a;
        const credentialsToInputDescriptors = new Map();
        (_a = this.fieldIds) === null || _a === void 0 ? void 0 : _a.forEach((id) => {
            const inDescPath = jsonpath_1.default.stringify(id.path.slice(0, 3));
            this.credentialsSubjectsByPath.forEach((cs, credentialPath) => {
                const hs = this.isHolder.find((e) => jsonpath_1.default.stringify(e.path.slice(0, 3)) === inDescPath);
                if (Object.keys(cs).includes(id.value) && (hs === null || hs === void 0 ? void 0 : hs.value.directive) === directive) {
                    credentialsToInputDescriptors.set(credentialPath, inDescPath);
                }
            });
        });
        return credentialsToInputDescriptors;
    }
    createResult(fieldIdSet, inputDescriptorPath, credentialSub, myStatus, wvc, message) {
        return {
            input_descriptor_path: inputDescriptorPath,
            verifiable_credential_path: credentialSub[0],
            evaluator: this.getName(),
            status: myStatus,
            payload: Object.assign({ fieldIdSet, credentialSubject: credentialSub[1] }, (wvc ? { format: wvc.format } : {})),
            message: message !== null && message !== void 0 ? message : this.messages.get(myStatus),
        };
    }
}
exports.SubjectIsHolderEvaluationHandler = SubjectIsHolderEvaluationHandler;
//# sourceMappingURL=data:application/json;base64,