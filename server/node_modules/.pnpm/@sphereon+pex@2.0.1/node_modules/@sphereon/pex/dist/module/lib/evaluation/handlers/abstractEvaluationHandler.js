import jp from 'jsonpath';
import { Status } from '../../ConstraintUtils';
export class AbstractEvaluationHandler {
    _client;
    nextHandler;
    constructor(_client) {
        this._client = _client;
    }
    setNext(handler) {
        this.nextHandler = handler;
        return handler;
    }
    getNext() {
        return this.nextHandler;
    }
    hasNext() {
        return this.nextHandler != undefined;
    }
    get client() {
        return this._client;
    }
    get wrappedVcs() {
        return this._client.wrappedVcs;
    }
    set wrappedVcs(wrappedVcs) {
        this._client.wrappedVcs = wrappedVcs;
    }
    get presentationSubmission() {
        return this._client.presentationSubmission;
    }
    set presentationSubmission(presentationSubmission) {
        this._client.presentationSubmission = presentationSubmission;
    }
    getResults() {
        return this._client.results;
    }
    updatePresentationSubmission(pd) {
        this._client.assertPresentationSubmission();
        this.presentationSubmission.descriptor_map.forEach((descriptor, index, descriptorMap) => {
            /**
               * TODO map the nested credential
               let vcPath = jp.stringify(e.payload.result.path)
               */
            let inputDescriptor;
            const result = this.getResults()
                .filter((r) => r.status === Status.ERROR && r.evaluator === this.getName())
                .find((result) => {
                inputDescriptor = jp.query(pd, result.input_descriptor_path)[0];
                return result.verifiable_credential_path === descriptor.path && inputDescriptor?.id === descriptor.id;
            });
            if (result) {
                delete descriptorMap[index];
            }
        });
    }
    removeDuplicate(results) {
        return results.reduce((arr, cur) => {
            const result = arr.find((i) => i.input_descriptor_path === cur.input_descriptor_path && i.verifiable_credential_path === cur.verifiable_credential_path);
            if (!result) {
                return arr.concat([cur]);
            }
            else {
                return arr;
            }
        }, []);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RFdmFsdWF0aW9uSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYi9ldmFsdWF0aW9uL2hhbmRsZXJzL2Fic3RyYWN0RXZhbHVhdGlvbkhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTFCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQU8vQyxNQUFNLE9BQWdCLHlCQUF5QjtJQUd6QjtJQUZaLFdBQVcsQ0FBZ0M7SUFFbkQsWUFBb0IsT0FBeUI7UUFBekIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7SUFBRyxDQUFDO0lBRTFDLE9BQU8sQ0FBQyxPQUEwQjtRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztRQUMzQixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBSU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBSUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUVELElBQVcsVUFBVSxDQUFDLFVBQXlDO1FBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBVyxzQkFBc0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFXLHNCQUFzQixDQUFDLHNCQUE4QztRQUM5RSxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDO0lBQy9ELENBQUM7SUFFTSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRU0sNEJBQTRCLENBQUMsRUFBbUM7UUFDckUsSUFBSSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRTtZQUN0Rjs7O2lCQUdLO1lBQ0wsSUFBSSxlQUFzRCxDQUFDO1lBQzNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7aUJBQzdCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUMxRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDZixlQUFlLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hFLE9BQU8sTUFBTSxDQUFDLDBCQUEwQixLQUFLLFVBQVUsQ0FBQyxJQUFJLElBQUksZUFBZSxFQUFFLEVBQUUsS0FBSyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQ3hHLENBQUMsQ0FBQyxDQUFDO1lBQ0wsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxlQUFlLENBQUMsT0FBNkI7UUFDbEQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBeUIsRUFBRSxHQUF1QixFQUFFLEVBQUU7WUFDM0UsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FDckIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsS0FBSyxHQUFHLENBQUMscUJBQXFCLElBQUksQ0FBQyxDQUFDLDBCQUEwQixLQUFLLEdBQUcsQ0FBQywwQkFBMEIsQ0FDaEksQ0FBQztZQUNGLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDTCxPQUFPLEdBQUcsQ0FBQzthQUNaO1FBQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztDQUNGIn0=