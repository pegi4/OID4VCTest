"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitDisclosureEvaluationHandler = void 0;
const pex_models_1 = require("@sphereon/pex-models");
const ConstraintUtils_1 = require("../../ConstraintUtils");
const Messages_1 = __importDefault(require("../../types/Messages"));
const utils_1 = require("../../utils");
const abstractEvaluationHandler_1 = require("./abstractEvaluationHandler");
class LimitDisclosureEvaluationHandler extends abstractEvaluationHandler_1.AbstractEvaluationHandler {
    constructor(client) {
        super(client);
    }
    getName() {
        return 'LimitDisclosureEvaluation';
    }
    handle(pd, wrappedVcs) {
        // PresentationDefinitionV2 is the common denominator
        pd.input_descriptors.forEach((inDesc, index) => {
            var _a, _b, _c;
            if (((_a = inDesc.constraints) === null || _a === void 0 ? void 0 : _a.fields) &&
                (((_b = inDesc.constraints) === null || _b === void 0 ? void 0 : _b.limit_disclosure) === pex_models_1.Optionality.Required || ((_c = inDesc.constraints) === null || _c === void 0 ? void 0 : _c.limit_disclosure) === pex_models_1.Optionality.Preferred)) {
                this.evaluateLimitDisclosure(wrappedVcs, inDesc.constraints, index);
            }
        });
    }
    isLimitDisclosureSupported(wvc, vcIdx, idIdx, optionality) {
        const limitDisclosureSignatures = this.client.limitDisclosureSignatureSuites;
        const proof = wvc.decoded.proof;
        if (!proof || Array.isArray(proof) || !proof.type) {
            // todo: Support/inspect array based proofs
            return false;
        }
        else if (!(limitDisclosureSignatures === null || limitDisclosureSignatures === void 0 ? void 0 : limitDisclosureSignatures.includes(proof.type))) {
            if (optionality == pex_models_1.Optionality.Required) {
                this.createLimitDisclosureNotSupportedResult(idIdx, vcIdx);
            }
            return false;
        }
        return true;
    }
    evaluateLimitDisclosure(wrappedVcs, constraints, idIdx) {
        const fields = constraints === null || constraints === void 0 ? void 0 : constraints.fields;
        const optionality = constraints.limit_disclosure;
        wrappedVcs.forEach((wvc, index) => {
            if (optionality && this.isLimitDisclosureSupported(wvc, index, idIdx, optionality)) {
                this.enforceLimitDisclosure(wvc.credential, fields, idIdx, index, wrappedVcs, optionality);
            }
        });
    }
    enforceLimitDisclosure(vc, fields, idIdx, index, wrappedVcs, limitDisclosure) {
        const internalCredentialToSend = this.createVcWithRequiredFields(vc, fields, idIdx, index);
        /* When verifiableCredentialToSend is null/undefined an error is raised, the credential will
         * remain untouched and the verifiable credential won't be submitted.
         */
        if (internalCredentialToSend) {
            wrappedVcs[index].credential = internalCredentialToSend;
            this.createSuccessResult(idIdx, `$[${index}]`, limitDisclosure);
        }
    }
    createVcWithRequiredFields(vc, fields, idIdx, vcIdx) {
        let credentialToSend = {};
        credentialToSend = Object.assign(credentialToSend, vc);
        credentialToSend.credentialSubject = {};
        for (const field of fields) {
            if (field.path) {
                const inputField = utils_1.JsonPathUtils.extractInputField(vc, field.path);
                if (inputField.length > 0) {
                    credentialToSend = this.copyResultPathToDestinationCredential(inputField[0], vc, credentialToSend);
                }
                else {
                    this.createMandatoryFieldNotFoundResult(idIdx, vcIdx, field.path);
                    return undefined;
                }
            }
        }
        return credentialToSend;
    }
    copyResultPathToDestinationCredential(requiredField, internalCredential, internalCredentialToSend) {
        //TODO: ESSIFI-186
        let credentialSubject = Object.assign({}, internalCredential.credentialSubject);
        requiredField.path.forEach((e) => {
            if (credentialSubject[e]) {
                credentialSubject = { [e]: credentialSubject[e] };
            }
        });
        internalCredentialToSend.credentialSubject = Object.assign(Object.assign({}, internalCredentialToSend.credentialSubject), credentialSubject);
        return internalCredentialToSend;
    }
    createSuccessResult(idIdx, path, limitDisclosure) {
        return this.getResults().push({
            input_descriptor_path: `$.input_descriptors[${idIdx}]`,
            verifiable_credential_path: `${path}`,
            evaluator: this.getName(),
            status: limitDisclosure === pex_models_1.Optionality.Required ? ConstraintUtils_1.Status.INFO : ConstraintUtils_1.Status.WARN,
            message: Messages_1.default.LIMIT_DISCLOSURE_APPLIED,
            payload: undefined,
        });
    }
    createMandatoryFieldNotFoundResult(idIdx, vcIdx, path) {
        return this.getResults().push({
            input_descriptor_path: `$.input_descriptors[${idIdx}]`,
            verifiable_credential_path: `$[${vcIdx}]`,
            evaluator: this.getName(),
            status: ConstraintUtils_1.Status.ERROR,
            message: Messages_1.default.VERIFIABLE_CREDENTIAL_MANDATORY_FIELD_NOT_PRESENT,
            payload: path,
        });
    }
    createLimitDisclosureNotSupportedResult(idIdx, vcIdx) {
        return this.getResults().push({
            input_descriptor_path: `$.input_descriptors[${idIdx}]`,
            verifiable_credential_path: `$[${vcIdx}]`,
            evaluator: this.getName(),
            status: ConstraintUtils_1.Status.ERROR,
            message: Messages_1.default.LIMIT_DISCLOSURE_NOT_SUPPORTED,
        });
    }
}
exports.LimitDisclosureEvaluationHandler = LimitDisclosureEvaluationHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXREaXNjbG9zdXJlRXZhbHVhdGlvbkhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvZXZhbHVhdGlvbi9oYW5kbGVycy9saW1pdERpc2Nsb3N1cmVFdmFsdWF0aW9uSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBNkc7QUFJN0csMkRBQStDO0FBRS9DLG9FQUErQztBQUMvQyx1Q0FBNEM7QUFHNUMsMkVBQXdFO0FBRXhFLE1BQWEsZ0NBQWlDLFNBQVEscURBQXlCO0lBQzdFLFlBQVksTUFBd0I7UUFDbEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTywyQkFBMkIsQ0FBQztJQUNyQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEVBQW1DLEVBQUUsVUFBeUM7UUFDMUYscURBQXFEO1FBQ3BELEVBQXVDLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBeUIsRUFBRSxLQUFhLEVBQUUsRUFBRTs7WUFDOUcsSUFDRSxDQUFBLE1BQUEsTUFBTSxDQUFDLFdBQVcsMENBQUUsTUFBTTtnQkFDMUIsQ0FBQyxDQUFBLE1BQUEsTUFBTSxDQUFDLFdBQVcsMENBQUUsZ0JBQWdCLE1BQUssd0JBQVcsQ0FBQyxRQUFRLElBQUksQ0FBQSxNQUFBLE1BQU0sQ0FBQyxXQUFXLDBDQUFFLGdCQUFnQixNQUFLLHdCQUFXLENBQUMsU0FBUyxDQUFDLEVBQ2pJO2dCQUNBLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUNyRTtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDBCQUEwQixDQUFDLEdBQWdDLEVBQUUsS0FBYSxFQUFFLEtBQWEsRUFBRSxXQUF3QjtRQUN6SCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxNQUFNLENB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