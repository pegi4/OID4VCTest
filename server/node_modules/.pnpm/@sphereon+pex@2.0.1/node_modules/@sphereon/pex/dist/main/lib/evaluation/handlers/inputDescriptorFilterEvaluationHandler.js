"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputDescriptorFilterEvaluationHandler = void 0;
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const jsonpath_1 = __importDefault(require("jsonpath"));
const ConstraintUtils_1 = require("../../ConstraintUtils");
const Messages_1 = __importDefault(require("../../types/Messages"));
const utils_1 = require("../../utils");
const abstractEvaluationHandler_1 = require("./abstractEvaluationHandler");
class InputDescriptorFilterEvaluationHandler extends abstractEvaluationHandler_1.AbstractEvaluationHandler {
    constructor(client) {
        super(client);
    }
    getName() {
        return 'FilterEvaluation';
    }
    handle(pd, wrappedVcs) {
        const fields = jsonpath_1.default.nodes(pd, '$..fields[*]');
        wrappedVcs.forEach((wvc, vcIndex) => {
            this.createNoFieldResults(pd, vcIndex, wvc);
            fields.forEach((field) => {
                let inputField = [];
                if (field.value.path) {
                    inputField = utils_1.JsonPathUtils.extractInputField(wvc.credential, field.value.path);
                }
                let resultFound = false;
                for (const inputFieldKey of inputField) {
                    if (this.evaluateFilter(inputFieldKey, field.value)) {
                        resultFound = true;
                        const payload = { result: Object.assign({}, inputField[0]), valid: true, format: wvc.format };
                        this.getResults().push(Object.assign({}, this.createResultObject(jsonpath_1.default.stringify(field.path.slice(0, 3)), vcIndex, payload)));
                    }
                }
                if (!resultFound) {
                    if (!inputField.length) {
                        const payload = { valid: false, format: wvc.format };
                        this.createResponse(field, vcIndex, payload, Messages_1.default.INPUT_CANDIDATE_DOESNT_CONTAIN_PROPERTY);
                    }
                    else {
                        const payload = { result: Object.assign({}, inputField[0]), valid: false, format: wvc.format };
                        this.createResponse(field, vcIndex, payload, Messages_1.default.INPUT_CANDIDATE_FAILED_FILTER_EVALUATION);
                    }
                }
            });
        });
        this.updatePresentationSubmission(pd);
    }
    createNoFieldResults(pd, vcIndex, credential) {
        // PresentationDefinitionV2 is the common denominator
        const noFields = pd.input_descriptors
            .map((inDesc, index) => {
            return { index, inDesc };
        })
            .filter((el) => { var _a, _b, _c; return ((_a = el.inDesc.constraints) === null || _a === void 0 ? void 0 : _a.fields) === undefined || ((_c = (_b = el.inDesc.constraints) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c.length) === 0; });
        noFields.forEach((noField) => {
            const payload = { result: [], valid: true, format: credential.format };
            this.getResults().push(Object.assign({}, this.createResultObject(`$.input_descriptors[${noField.index}]`, vcIndex, payload)));
        });
    }
    createResponse(field, vcIndex, payload, message) {
        this.getResults().push(Object.assign(Object.assign({}, this.createResultObject(jsonpath_1.default.stringify(field.path.slice(0, 3)), vcIndex, payload)), { ['status']: ConstraintUtils_1.Status.ERROR, ['message']: message }));
    }
    createResultObject(path, vcIndex, payload) {
        return {
            input_descriptor_path: path,
            verifiable_credential_path: `$[${vcIndex}]`,
            evaluator: this.getName(),
            status: ConstraintUtils_1.Status.INFO,
            message: Messages_1.default.INPUT_CANDIDATE_IS_ELIGIBLE_FOR_PRESENTATION_SUBMISSION,
            payload,
        };
    }
    evaluateFilter(result, field) {
        var _a;
        if (((_a = field.filter) === null || _a === void 0 ? void 0 : _a.format) && field.filter.format === 'date') {
            this.transformDateFormat(result);
        }
        const ajv = new ajv_1.default({ verbose: true, allowUnionTypes: true, allErrors: true, strict: false });
        (0, ajv_formats_1.default)(ajv);
        if (field.filter) {
            return ajv.validate(field.filter, result.value);
        }
        return true;
    }
    transformDateFormat(result) {
        const date = new Date(result.value);
        let month = date.getUTCMonth() + 1 + '';
        if (month.length === 1) {
            month = '0' + month;
        }
        let day = date.getUTCDate() + '';
        if (day.length === 1) {
            day = '0' + day;
        }
        result.value = date.getUTCFullYear() + '-' + month + '-' + day;
        result.value = date.toISOString().substring(0, date.toISOString().indexOf('T'));
    }
}
exports.InputDescriptorFilterEvaluationHandler = InputDescriptorFilterEvaluationHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXREZXNjcmlwdG9yRmlsdGVyRXZhbHVhdGlvbkhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvZXZhbHVhdGlvbi9oYW5kbGVycy9pbnB1dERlc2NyaXB0b3JGaWx0ZXJFdmFsdWF0aW9uSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSw4Q0FBc0I7QUFDdEIsOERBQXFDO0FBQ3JDLHdEQUE2QztBQUU3QywyREFBK0M7QUFFL0Msb0VBQStDO0FBQy9DLHVDQUE0QztBQUk1QywyRUFBd0U7QUFFeEUsTUFBYSxzQ0FBdUMsU0FBUSxxREFBeUI7SUFDbkYsWUFBWSxNQUF3QjtRQUNsQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFFTSxNQUFNLENBQUMsRUFBbUMsRUFBRSxVQUF5QztRQUMxRixNQUFNLE1BQU0sR0FBMEQsa0JBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ25HLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFnQyxFQUFFLE9BQWUsRUFBRSxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDdkIsSUFBSSxVQUFVLEdBQWdELEVBQUUsQ0FBQztnQkFDakUsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtvQkFDcEIsVUFBVSxHQUFHLHFCQUFhLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNoRjtnQkFDRCxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7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