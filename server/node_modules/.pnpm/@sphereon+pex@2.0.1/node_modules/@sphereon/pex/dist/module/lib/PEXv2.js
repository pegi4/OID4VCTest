import { PEX } from './PEX';
import { EvaluationClientWrapper } from './evaluation';
import { PresentationSubmissionLocation } from './signing';
import { SSITypesBuilder } from './types';
import { PresentationDefinitionV2VB, ValidationEngine } from './validation';
/**
 * This is the main interfacing class to be used from outside the library to use the functionality provided by the library.
 */
export class PEXv2 extends PEX {
    constructor() {
        super();
    }
    /***
     * The evaluatePresentationV2 compares what is expected from a presentation with a presentationDefinitionV2.
     *
     * @param presentationDefinition the definition of what is expected in the presentation.
     * @param presentation the presentation which has to be evaluated in comparison of the definition.
     * @param opts - limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the evaluation results specify what was expected and was fulfilled and also specifies which requirements described in the input descriptors
     * were not fulfilled by the presentation.
     */
    evaluatePresentation(presentationDefinition, presentation, opts) {
        SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinition); // only doing validation
        return super.evaluatePresentation(presentationDefinition, presentation, opts);
    }
    /***
     * The evaluateCredentialsV2 compares what is expected from a verifiableCredentials with the presentationDefinitionV2.
     *
     * @param presentationDefinition the v2 definition of what is expected in the presentation.
     * @param verifiableCredentials the verifiable credentials which are candidates to fulfill requirements defined in the presentationDefinition param.
     * @param opts - holderDIDs the list of the DIDs that the wallet holders controlls.
     *              limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the evaluation results specify what was expected and was fulfilled and also specifies which requirements described in the input descriptors
     * were not fulfilled by the verifiable credentials.
     */
    evaluateCredentials(presentationDefinition, verifiableCredentials, opts) {
        SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinition); // only doing validation
        return super.evaluateCredentials(presentationDefinition, verifiableCredentials, opts);
    }
    /**
     * The selectFromV2 method is a helper function that helps filter out the verifiable credentials which can not be selected and returns
     * the selectable credentials.
     *
     * @param presentationDefinition the v2 definition of what is expected in the presentation.
     * @param verifiableCredentials verifiable credentials are the credentials from wallet provided to the library to find selectable credentials.
     * @param opts - holderDIDs the decentralized identity of the wallet holderDID. This is used to identify the credentials issued to the holderDID of wallet.
     *                limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the selectable credentials.
     */
    selectFrom(presentationDefinition, verifiableCredentials, opts) {
        this._evaluationClientWrapper = new EvaluationClientWrapper();
        return this._evaluationClientWrapper.selectFrom(SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinition), SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(verifiableCredentials), opts);
    }
    /**
     * This method helps create a Presentation. A Presentation after signing becomes a Verifiable Presentation and can be sent to
     * a verifier.
     *
     * @param presentationDefinition the v2 definition of what is expected in the presentation.
     * @param selectedCredentials the credentials which were declared selectable by getSelectableCredentials and then chosen by the intelligent-user
     * (e.g. human).
     * @param opts? - holderDID optional; the decentralized identifier of the Credential subject. This is used to identify the holderDID of the presentation.
     *
     * @return the presentation.
     */
    presentationFrom(presentationDefinition, selectedCredentials, opts) {
        const presentationSubmissionLocation = opts?.presentationSubmissionLocation ?? PresentationSubmissionLocation.PRESENTATION;
        const presentationSubmission = this._evaluationClientWrapper.submissionFrom(SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinition), SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(selectedCredentials));
        const presentation = PEX.constructPresentation(selectedCredentials, {
            ...opts,
            presentationSubmission: presentationSubmissionLocation === PresentationSubmissionLocation.PRESENTATION ? presentationSubmission : undefined,
        });
        return {
            presentation,
            presentationSubmissionLocation,
            presentationSubmission,
        };
    }
    /**
     * This method validates whether an object is usable as a presentation definition or not.
     *
     * @param presentationDefinitionV2 the object to be validated.
     *
     * @return the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation definition
     */
    static validateDefinition(presentationDefinitionV2) {
        const pd = SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinitionV2);
        return new ValidationEngine().validate([
            {
                bundler: new PresentationDefinitionV2VB('root'),
                target: pd,
            },
        ]);
    }
    /**
     * This method validates whether an object is usable as a presentation submission or not.
     *
     * @param presentationSubmission the object to be validated.
     *
     * @return the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation submission
     */
    static validateSubmission(presentationSubmission) {
        return PEX.validateSubmission(presentationSubmission);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUEVYdjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvUEVYdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUM1QixPQUFPLEVBQUUsdUJBQXVCLEVBQW9DLE1BQU0sY0FBYyxDQUFDO0FBQ3pGLE9BQU8sRUFBNEMsOEJBQThCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMxQyxPQUFPLEVBQUUsMEJBQTBCLEVBQWEsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFdkY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sS0FBTSxTQUFRLEdBQUc7SUFDNUI7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSSxvQkFBb0IsQ0FDekIsc0JBQWdELEVBQ2hELFlBQTRELEVBQzVELElBSUM7UUFFRCxlQUFlLENBQUMsMkNBQTJDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtRQUM3RyxPQUFPLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxzQkFBc0IsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSSxtQkFBbUIsQ0FDeEIsc0JBQWdELEVBQ2hELHFCQUFxRCxFQUNyRCxJQUtDO1FBRUQsZUFBZSxDQUFDLDJDQUEyQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyx3QkFBd0I7UUFDN0csT0FBTyxLQUFLLENBQUMsbUJBQW1CLENBQUMsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSSxVQUFVLENBQ2Ysc0JBQWdELEVBQ2hELHFCQUFxRCxFQUNyRCxJQUtDO1FBRUQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQztRQUM5RCxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLENBQzdDLGVBQWUsQ0FBQywyQ0FBMkMsQ0FBQyxzQkFBc0IsQ0FBQyxFQUNuRixlQUFlLENBQUMsNENBQTRDLENBQUMscUJBQXFCLENBQUMsRUFDbkYsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNJLGdCQUFnQixDQUNyQixzQkFBZ0QsRUFDaEQsbUJBQW1ELEVBQ25ELElBQTJCO1FBRTNCLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxFQUFFLDhCQUE4QixJQUFJLDhCQUE4QixDQUFDLFlBQVksQ0FBQztRQUMzSCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLENBQ3pFLGVBQWUsQ0FBQywyQ0FBMkMsQ0FBQyxzQkFBc0IsQ0FBQyxFQUNuRixlQUFlLENBQUMsNENBQTRDLENBQUMsbUJBQW1CLENBQUMsQ0FDbEYsQ0FBQztRQUNGLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxtQkFBbUIsRUFBRTtZQUNsRSxHQUFHLElBQUk7WUFDUCxzQkFBc0IsRUFBRSw4QkFBOEIsS0FBSyw4QkFBOEIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxTQUFTO1NBQzVJLENBQUMsQ0FBQztRQUNILE9BQU87WUFDTCxZQUFZO1lBQ1osOEJBQThCO1lBQzlCLHNCQUFzQjtTQUN2QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyx3QkFBa0Q7UUFDakYsTUFBTSxFQUFFLEdBQUcsZUFBZSxDQUFDLDJDQUEyQyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDakcsT0FBTyxJQUFJLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ3JDO2dCQUNFLE9BQU8sRUFBRSxJQUFJLDBCQUEwQixDQUFDLE1BQU0sQ0FBQztnQkFDL0MsTUFBTSxFQUFFLEVBQUU7YUFDWDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsc0JBQThDO1FBQzdFLE9BQU8sR0FBRyxDQUFDLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGIn0=