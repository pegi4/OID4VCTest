"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterToRestrictedDIDs = exports.isRestrictedDID = exports.uniformDIDMethods = exports.definitionVersionDiscovery = exports.getIssuerString = exports.getSubjectIdsAsString = void 0;
const ajv_1 = __importDefault(require("ajv"));
const types_1 = require("../types");
const presentationDefinitionSchema_1 = require("../validation/core/presentationDefinitionSchema");
const ObjectUtils_1 = require("./ObjectUtils");
const jsonPathUtils_1 = require("./jsonPathUtils");
function getSubjectIdsAsString(vc) {
    const subjects = Array.isArray(vc.credentialSubject) ? vc.credentialSubject : [vc.credentialSubject];
    return subjects.filter((s) => !!s.id).map((value) => value.id);
}
exports.getSubjectIdsAsString = getSubjectIdsAsString;
function getIssuerString(vc) {
    return ObjectUtils_1.ObjectUtils.isString(vc.issuer) ? vc.issuer : vc.issuer.id;
}
exports.getIssuerString = getIssuerString;
function definitionVersionDiscovery(presentationDefinition) {
    const presentationDefinitionCopy = JSON.parse(JSON.stringify(presentationDefinition));
    jsonPathUtils_1.JsonPathUtils.changePropertyNameRecursively(presentationDefinitionCopy, '_const', 'const');
    jsonPathUtils_1.JsonPathUtils.changePropertyNameRecursively(presentationDefinitionCopy, '_enum', 'enum');
    const data = { presentation_definition: presentationDefinitionCopy };
    const ajv = new ajv_1.default({ verbose: true, allowUnionTypes: true, allErrors: true, strict: false });
    const validateV2 = ajv.compile(presentationDefinitionSchema_1.PresentationDefinitionSchema.getPresentationDefinitionSchemaV2());
    let result = validateV2(data);
    if (result) {
        return { version: types_1.PEVersion.v2 };
    }
    const validateV1 = ajv.compile(presentationDefinitionSchema_1.PresentationDefinitionSchema.getPresentationDefinitionSchemaV1());
    result = validateV1(data);
    if (result) {
        return { version: types_1.PEVersion.v1 };
    }
    return { error: 'This is not a valid PresentationDefinition' };
}
exports.definitionVersionDiscovery = definitionVersionDiscovery;
function uniformDIDMethods(dids, opts) {
    var _a;
    let result = (_a = dids === null || dids === void 0 ? void 0 : dids.map((did) => did.toLowerCase()).map((did) => (did.startsWith('did:') ? did : `did:${did}`))) !== null && _a !== void 0 ? _a : [];
    if (opts === null || opts === void 0 ? void 0 : opts.removePrefix) {
        const length = opts.removePrefix.endsWith(':') ? opts.removePrefix.length : opts.removePrefix.length + 1;
        result = result.map((did) => (did.startsWith(opts.removePrefix) ? did.substring(length) : did));
    }
    if (result.includes('did')) {
        // The string did denotes every DID method, hence we return an empty array, indicating all methods are supported
        return [];
    }
    return result;
}
exports.uniformDIDMethods = uniformDIDMethods;
function isRestrictedDID(DID, restrictToDIDMethods) {
    const methods = uniformDIDMethods(restrictToDIDMethods);
    return methods.length === 0 || methods.some((method) => DID.toLowerCase().startsWith(method));
}
exports.isRestrictedDID = isRestrictedDID;
function filterToRestrictedDIDs(DIDs, restrictToDIDMethods) {
    const methods = uniformDIDMethods(restrictToDIDMethods);
    if (methods.length === 0) {
        return DIDs;
    }
    return methods.flatMap((method) => DIDs.filter((DID) => DID.toLowerCase().startsWith(method)));
}
exports.filterToRestrictedDIDs = filterToRestrictedDIDs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi91dGlscy9WQ1V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLDhDQUFzQjtBQUV0QixvQ0FBaUY7QUFDakYsa0dBQStGO0FBRS9GLCtDQUE0QztBQUM1QyxtREFBZ0Q7QUFFaEQsU0FBZ0IscUJBQXFCLENBQUMsRUFBZTtJQUNuRCxNQUFNLFFBQVEsR0FBOEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2hKLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQWEsQ0FBQztBQUM3RSxDQUFDO0FBSEQsc0RBR0M7QUFFRCxTQUFnQixlQUFlLENBQUMsRUFBZTtJQUM3QyxPQUFPLHlCQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLE1BQWlCLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxNQUFrQixDQUFDLEVBQUUsQ0FBQztBQUM3RixDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQiwwQkFBMEIsQ0FBQyxzQkFBK0M7SUFDeEYsTUFBTSwwQkFBMEIsR0FBNEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztJQUMvRyw2QkFBYSxDQUFDLDZCQUE2QixDQUFDLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRiw2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