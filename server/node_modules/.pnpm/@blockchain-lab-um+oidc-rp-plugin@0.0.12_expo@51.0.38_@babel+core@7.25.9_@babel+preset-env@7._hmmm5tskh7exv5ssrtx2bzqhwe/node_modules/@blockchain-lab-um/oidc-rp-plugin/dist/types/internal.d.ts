import { SupportedCredential, Credentials, TokenRequest, CredentialRequest, PresentationDefinition, AuthorizationResponse, Proof } from '@blockchain-lab-um/oidc-types';

interface IPluginConfig {
    supported_did_methods: string[];
    supported_curves: string[];
    supported_digital_signatures: string[];
    url: string;
    supported_credentials?: SupportedCredential[];
}
interface CreateCredentialOfferRequestArgs {
    credentials: Credentials;
    grants?: ('urn:ietf:params:oauth:grant-type:pre-authorized_code' | 'authorization_code')[];
    userPinRequired?: boolean;
}
interface CreateCredentialOfferRequestResposne {
    credentialOfferRequest: string;
    credentials: Credentials;
    preAuthorizedCode?: string;
    userPin?: string;
}
interface HandlePreAuthorizedCodeTokenRequestArgs {
    body: TokenRequest;
    preAuthorizedCode: string;
    userPin?: string;
    overrides?: {
        accessToken?: string;
        accessTokenExpiresIn?: number;
        cNonce?: string;
        cNonceExpiresIn?: number;
    };
}
interface IsValidTokenRequestArgs {
    body: TokenRequest;
}
type IsValidTokenRequestResponse = {
    grantType: 'authorization_code' | 'urn:ietf:params:oauth:grant-type:pre-authorized_code';
    preAuthorizedCode?: string;
} & ({
    grantType: 'authorization_code';
} | {
    grantType: 'urn:ietf:params:oauth:grant-type:pre-authorized_code';
    preAuthorizedCode: string;
});
interface HandleCredentialRequestArgs {
    body: CredentialRequest;
    issuerDid: string;
    subjectDid: string;
    credentialSubjectClaims: unknown;
}
interface HandleAuthorizationResponseArgs {
    nonce?: string;
    nonceExpiresIn?: number;
    presentationDefinition: PresentationDefinition;
    body: AuthorizationResponse;
}
interface CreateJWTProofParams {
    privateKey: string;
    audience: string;
    data?: any;
    nonce?: string;
}
interface ProofOfPossesionArgs {
    proof?: Proof;
    cNonce?: string;
    cNonceExpiresIn?: number;
}
interface ProofOfPossesionResponseArgs {
    did: string;
}
interface CreateAuthorizationRequestArgs {
    clientId: string;
    redirectUri: string;
    presentationDefinition: PresentationDefinition;
    state: string;
    overrides?: {
        nonce?: string;
        nonceExpiresIn?: number;
    };
}
interface CreateAuthorizationRequestResponse {
    authorizationRequest: string;
    nonce: string;
    nonceExpiresIn: number;
}

export { CreateAuthorizationRequestArgs, CreateAuthorizationRequestResponse, CreateCredentialOfferRequestArgs, CreateCredentialOfferRequestResposne, CreateJWTProofParams, HandleAuthorizationResponseArgs, HandleCredentialRequestArgs, HandlePreAuthorizedCodeTokenRequestArgs, IPluginConfig, IsValidTokenRequestArgs, IsValidTokenRequestResponse, ProofOfPossesionArgs, ProofOfPossesionResponseArgs };
