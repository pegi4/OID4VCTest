import { IssuerServerMetadata, TokenResponse, CredentialResponse } from '@blockchain-lab-um/oidc-types';
import { IAgentPlugin } from '@veramo/core';
import { IOIDCRPPlugin, OIDCRPAgentContext } from '../types/IOIDCRPPlugin.js';
import { IPluginConfig, CreateAuthorizationRequestArgs, CreateAuthorizationRequestResponse, HandleAuthorizationResponseArgs, CreateCredentialOfferRequestArgs, CreateCredentialOfferRequestResposne, IsValidTokenRequestArgs, IsValidTokenRequestResponse, HandlePreAuthorizedCodeTokenRequestArgs, HandleCredentialRequestArgs, ProofOfPossesionArgs, ProofOfPossesionResponseArgs } from '../types/internal.js';
import { Result } from '../utils/result.js';
import '@veramo/credential-eip712';
import '@veramo/credential-ld';
import '../utils/detailedError.js';

/**
 * {@inheritDoc IMyAgentPlugin}
 * @beta
 */
declare class OIDCRPPlugin implements IAgentPlugin {
    private pluginConfig;
    constructor(config: IPluginConfig);
    readonly methods: IOIDCRPPlugin;
    createAuthorizationRequest(args: CreateAuthorizationRequestArgs): Promise<Result<CreateAuthorizationRequestResponse>>;
    handleAuthorizationResponse(args: HandleAuthorizationResponseArgs, context: OIDCRPAgentContext): Promise<Result<boolean>>;
    handleIssuerServerMetadataRequest(): Promise<Result<IssuerServerMetadata>>;
    createCredentialOfferRequest(args: CreateCredentialOfferRequestArgs): Promise<Result<CreateCredentialOfferRequestResposne>>;
    isValidTokenRequest(args: IsValidTokenRequestArgs): Promise<Result<IsValidTokenRequestResponse>>;
    handlePreAuthorizedCodeTokenRequest(args: HandlePreAuthorizedCodeTokenRequestArgs): Promise<Result<TokenResponse>>;
    handleCredentialRequest(args: HandleCredentialRequestArgs, context: OIDCRPAgentContext): Promise<Result<CredentialResponse>>;
    proofOfPossession(args: ProofOfPossesionArgs, context: OIDCRPAgentContext): Promise<Result<ProofOfPossesionResponseArgs>>;
}

export { OIDCRPPlugin, OIDCRPPlugin as default };
