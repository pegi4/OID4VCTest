import { SupportedCredentialFormats, SupportedPresentationFormats } from './credential.js';
import { OAuth2AuthorizationServerMetadata, OAuth2ClientMetadata } from './oauth2.js';

interface IssuerServerMetadata extends OAuth2AuthorizationServerMetadata {
    credential_issuer: string;
    credential_endpoint: string;
    authorization_server?: string;
    batch_credential_endpoints?: string[];
    deferred_credential_endpoint?: string;
    credentials_supported: SupportedCredential[];
}
interface VerifierServerMetadata extends OAuth2ClientMetadata {
    vp_formats: (SupportedCredentialFormats | SupportedPresentationFormats)[];
    subject_syntax_types_supported: string[];
}
type SupportedCredential = {
    id?: string;
    cryptographic_binding_methods_supported?: string[];
    cryptographic_suites_supported?: string[];
    display?: CredentialDisplay[];
    order?: string[];
    credentialSchema: CredentialSchema;
} & (SupportedCredentialJwtVcJson | SupportedCredentialJwtVcJsonLd | SupportedCredentialMsoMdoc);
interface SupportedCredentialJwtVcJson {
    format: 'jwt_vc_json';
    types: string[];
    credentialSubject?: any;
}
interface SupportedCredentialJwtVcJsonLd {
    format: 'jwt_vc_json-ld' | 'ldp_vc';
    types: string[];
    '@context': string[];
    credentialSubject?: any;
}
interface SupportedCredentialMsoMdoc {
    format: 'mso_mdoc';
    doctype: string;
    claims?: any;
}
interface CredentialSchema {
    id: string;
    type: string;
}
interface CredentialDisplay {
    name: string;
    locale?: string;
    logo?: Logo;
    background_color?: string;
    text_color?: string;
}
interface Logo {
    url?: string;
    alt_text?: string;
}

export { CredentialSchema, IssuerServerMetadata, SupportedCredential, SupportedCredentialJwtVcJson, SupportedCredentialJwtVcJsonLd, SupportedCredentialMsoMdoc, VerifierServerMetadata };
